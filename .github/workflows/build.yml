name: Build

on:
  push:
  pull_request:
  schedule:
    - cron: '30 3 * * *'

jobs:
  build:
    name: Build & Deploy
    runs-on: ubuntu-latest

    services:
      postgresql:
        image: postgres:latest
        ports:
          - '5432:5432'
        env:
          POSTGRES_PASSWORD: vlingo123
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:latest
        ports:
          - '3306:3306'
        env:
          MYSQL_ROOT_PASSWORD: vlingo123
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - name: Prepare databases
        run: |
          psql -c "CREATE DATABASE vlingo_test;" -U postgres
          psql -c "CREATE USER vlingo_test WITH PASSWORD 'vlingo123' LOGIN NOSUPERUSER INHERIT CREATEDB NOCREATEROLE NOREPLICATION;" -U postgres

          mysql -u root -e "CREATE DATABASE vlingo_test;"
          mysql -u root -e "CREATE USER 'vlingo_test'@'%' IDENTIFIED BY 'vlingo123';"
          mysql -u root -e "GRANT ALL ON *.* TO 'vlingo_test'@'%';"
          mysql -u root -e "FLUSH PRIVILEGES;"
        env:
          PGPASSWORD: vlingo123
          PGHOST: localhost
          MYSQL_PWD: vlingo123
          MYSQL_HOST: 127.0.0.1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure Maven
        run: cp .github/settings.xml ~/.m2/settings.xml

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots install

      - name: Publish artifacts
        uses: actions/upload-artifact@v2
        with:
          name: JARs
          path: target/*.jar

      - name: Deploy
        if: (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && github.repository_owner == 'vlingo'
        run: mvn --batch-mode -DskipTests -DuseJFrogBintray=true deploy
        env:
          BINTRAY_USERNAME: ${{ secrets.BINTRAY_USERNAME }}
          BINTRAY_PASSWORD: ${{ secrets.BINTRAY_PASSWORD }}

      - name: Set up JDK for GitHub deployment
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Deploy to GitHub
        if: (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') && github.repository_owner == 'vlingo'
        run: mvn --batch-mode -DskipTests -DuseGitHubPackages=true deploy
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Trigger downstream builds
        if: startsWith(github.ref, 'refs/tags/') && github.repository_owner == 'vlingo'
        run: .github/trigger_deps.sh
        env:
          RELEASE_GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}

      - name: Notify slack
        if: always() && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) && github.repository_owner == 'vlingo'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: "${{ job.status == 'success' && 'good' || 'danger' }}"
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-cd
          SLACK_USERNAME: Bob the Builder
          SLACK_ICON: 'https://vlingo.io/wp-content/uploads/cropped-vlingo-favicon-180x180.png'
          SLACK_FOOTER: '${{ github.repository }}'

      - name: Cleanup
        run: rm -rf ~/.m2/repository/io/vlingo
